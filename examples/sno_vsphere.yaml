---
- hosts: localhost
  gather_facts: false
  become: false
  vars_files:
    - vars/config.yaml
  vars_prompt:
    - name: cluster_name
      prompt: Specify cluster name
      private: false
  tasks:
    - name: Destroy SNO cluster
      when: action == "delete" or action == "destroy"
      block:
        - name: Delete CNAME dns record
          amazon.aws.route53:
            state: absent
            zone: "{{ dns_zone }}"
            record: "{{ item }}.{{ cluster_name}}.{{ cluster_domain }}"
            type: CNAME
          loop:
            - "api"
            - "*.apps"

        - name: Delete a SNO VM
          kubernetes.kubevirt.kubevirt_vm:
            name: "{{ ocp_vmname_sno }}"
            namespace: "{{ namespace }}"
            state: absent

        - name: Remove Assisted Installer Cluster
          agonzalezrh.install_openshift.delete_cluster:
            cluster_id: "{{ cluster_id }}"
            offline_token: "{{ offline_token }}"


    - name: Create SNO cluster
      when: action == "create"
      block:
        - name: Create Assisted Installer Cluster
          agonzalezrh.install_openshift.create_cluster:
            name: "{{ cluster_name }}"
            openshift_version: "{{ cluster_version }}"
            base_dns_domain: "{{ cluster_domain }}"
            offline_token: "{{ offline_token }}"
            pull_secret: "{{ pull_secret }}"
            high_availability_mode: "None"
            service_networks:
              - cidr: "172.31.0.0/16"
          register: newcluster

        - name: Create Infrastructure environment
          agonzalezrh.install_openshift.create_infra_env:
            name: "{{ cluster_name }}-infra-env"
            image_type: "{{ cluster_iso_type }}"
            cluster_id: "{{ newcluster.result.id }}"
            ssh_authorized_key: "{{ ssh_authorized_key }}"
            offline_token: "{{ offline_token }}"
            pull_secret: "{{ pull_secret }}"
          register: newinfraenv

        - name: Create directory for downloaded files
          ansible.builtin.file:
            state: directory
            path: "{{ output_dir }}/{{ cluster_name }}"
            recurse: true


        - name: Upload ISO image to vSphere
          import_tasks: tasks/vsphere/upload_iso.yaml
          vars:
            image_url: "{{ newinfraenv.result.download_url }}"

        - name: Create a SNO VM
          include_tasks: tasks/vsphere/create_sno.yaml
          vars:
            image_url: "{{ newinfraenv.result.download_url }}"
            vmname: "{{ ocp_vmname_sno }}"
            namespace: "{{ ocp_namespace }}"
            storageclass: "{{ storage_class }}"

        - name: Wait for the hosts to be ready
          agonzalezrh.install_openshift.wait_for_hosts:
            cluster_id: "{{ newcluster.result.id }}"
            offline_token: "{{ offline_token }}"
            expected_hosts: 1
            wait_timeout: 600

        - name: Start cluster installation
          agonzalezrh.install_openshift.install_cluster:
            cluster_id: "{{ newcluster.result.id }}"
            offline_token: "{{ offline_token }}"
            wait_timeout: 1200

        - name: Obtain OpenShift cluster credentials
          register: credentials
          agonzalezrh.install_openshift.get_credentials:
            cluster_id: "{{ newcluster.result.id }}"
            offline_token: "{{ offline_token }}"

        - name: Display credentials
          debug:
            var: credentials.result

        - name: Downloads OpenShift cluster credentials
          agonzalezrh.install_openshift.download_credentials:
            cluster_id: "{{ newcluster.result.id }}"
            offline_token: "{{ offline_token }}"
            file_name: "{{ item }}"
            dest: "{{ output_dir }}/{{ cluster_name }}/{{ item }}"
          loop:
            - kubeadmin-password
            - kubeconfig
            - kubeconfig-noingress

        - name: Downloads OpenShift cluster files
          agonzalezrh.install_openshift.download_files:
            cluster_id: "{{ newcluster.result.id }}"
            offline_token: "{{ offline_token }}"
            file_name: "{{ item }}"
            dest: "{{ output_dir }}/{{ cluster_name }}/{{ item }}"
          loop:
            - bootstrap.ign
            - master.ign
            - metadata.json
            - worker.ign
            - install-config.yaml
            - custom_manifests.json
            - custom_manifests.yaml
